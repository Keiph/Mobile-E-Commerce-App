# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  # Additional information about this file can be found at
  ## https://dart.dev/guides/language/analysis-options
  rules:
    # Prevents accidental return type changes which results in a breaking API change.
    # Enforcing return type makes API changes visible in a diff
    # pedantic: enabled
    # http://dart-lang.github.io/linter/lints/always_declare_return_types.html
    - always_declare_return_types

    # Don't call print in production code
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/avoid_print.html
    - avoid_print

    # Use whatever makes you happy. noexcuse doesn't define a style
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_single_quotes.html
    - prefer_single_quotes

    # Use full path
    - always_use_package_imports

    # avoid relative importing of packages
    - avoid_relative_lib_imports

    # False positives:
    # - https://github.com/dart-lang/linter/issues/1142
    #
    # https://dart-lang.github.io/linter/lints/comment_references.html
    - comment_references

    # Type check for List<T>.remove(item) where item is! T
    # The list can't contain item. Those errors are not directly obvious especially when refactoring.
    # https://dart-lang.github.io/linter/lints/list_remove_unrelated_type.html
    - list_remove_unrelated_type

     # Concat Strings obviously with `+` inside a list.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/no_adjacent_strings_in_list.html
    - no_adjacent_strings_in_list

    # Null is not a type, use void
    # https://dart-lang.github.io/linter/lints/prefer_void_to_null.html
    - prefer_void_to_null

    # Adding a key without using it isn't helpful in applications, only for the Flutter SDK
    # Dart SDK: >= 2.8.0-dev.1.0 â€¢ (Linter v0.1.108)
    # https://dart-lang.github.io/linter/lints/use_key_in_widget_constructors.html
    - use_key_in_widget_constructors

    # Catches invalid regular expressions.
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/valid_regexps.html
    - valid_regexps

    # Single line `if`s are fine as recommended in Effective Dart "DO format your code using dartfmt"
    # pedantic: disabled
    # http://dart-lang.github.io/linter/lints/always_put_control_body_on_new_line.html
    - always_put_control_body_on_new_line

    # Flutter widgets always put a Key as first optional parameter which breaks this rule.
    # Also violates other orderings like matching the class fields or alphabetically.
    # pedantic: disabled
    # http://dart-lang.github.io/linter/lints/always_declare_return_types.html
    - always_put_required_named_parameters_first

    # Follow dart style use triple slashes
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/slash_for_doc_comments.html
    - slash_for_doc_comments


    - require_trailing_commas
